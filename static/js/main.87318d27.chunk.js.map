{"version":3,"sources":["components/errorIndicator/errorIndicator.jsx","components/movie/movie.jsx","components/moviesList/moviesList.jsx","components/spinner/spinner.jsx","components/stringRequestMovies/stringRequestMovies.jsx","services/mdbapiServices.jsx","components/app/no_image.jpg","components/app/app.jsx","index.jsx"],"names":["ErrorIndicator","errorTitle","message","description","type","showIcon","defaultProps","Movie","movieImgSrc","movieName","releaseDate","span","className","alt","src","MoviesList","moviesData","gutter","map","id","Spinner","size","StringRequestMovies","updateSearchString","placeholder","onChange","debounce","event","text","target","value","autoFocus","MdbapiServices","apiBase","fragment","a","fetch","this","res","ok","Error","json","body","results","length","App","mdbapiServices","state","error","total","searchString","page","createMovieCard","createMovieList","movies","isEven","newArr","slice","movie","getImgSrc","poster_path","original_title","format","parseISO","release_date","formatMovieDescription","overview","setState","loading","updateMovieList","updatePage","imgName","icon","onError","query","newPage","getResources","movieList","total_results","words","split","join","hasData","spinner","errorMessage","content","pagination","showSizeChanger","defaultCurrent","pageSize","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87318d27.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert } from 'antd';\n\nconst ErrorIndicator = ({ errorTitle }) => <Alert message=\"Error\" description={errorTitle} type=\"error\" showIcon />;\n\nErrorIndicator.defaultProps = {\n  errorTitle: '',\n};\n\nErrorIndicator.propTypes = {\n  errorTitle: PropTypes.string,\n};\n\nexport default ErrorIndicator;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Col } from 'antd';\nimport './movie.css';\n\nconst Movie = ({ movieImgSrc, movieName, releaseDate, description }) => (\n  <Col span={12}>\n    <div className=\"movie\">\n      <div className=\"img-container\">\n        <img alt=\"movieBaner\" src={movieImgSrc} />\n      </div>\n      <div className=\"movie-info\">\n        <h2>{movieName}</h2>\n        <p className=\"movie-releaseDate\">{releaseDate}</p>\n        <ul className=\"movieGenres\">\n          <li className=\"movieGenres-genre\">Action</li>\n          <li className=\"movieGenres-genre\">Drama</li>\n        </ul>\n        <p className=\"movie-description\">{description}</p>\n      </div>\n    </div>\n  </Col>\n);\n\nMovie.defaultProps = {\n  movieImgSrc: '',\n  movieName: '',\n  releaseDate: '',\n  description: '',\n};\n\nMovie.propTypes = {\n  movieImgSrc: PropTypes.string,\n  movieName: PropTypes.string,\n  releaseDate: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default Movie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row } from 'antd';\nimport Movie from '../movie/movie';\nimport './moviesList.css';\n\nconst MoviesList = ({ moviesData }) => (\n  <section className=\"main\">\n    <Row gutter={[36, 35]}>\n      {moviesData.map(({ id, movieImgSrc, movieName, releaseDate, description }) => (\n        <Movie\n          key={id}\n          movieImgSrc={movieImgSrc}\n          movieName={movieName}\n          releaseDate={releaseDate}\n          description={description}\n        />\n      ))}\n    </Row>\n  </section>\n);\n\nMoviesList.defaultProps = {\n  moviesData: [],\n};\n\nMoviesList.propTypes = {\n  moviesData: PropTypes.arrayOf(PropTypes.any),\n};\n\nexport default MoviesList;\n","import React from 'react';\nimport { Spin } from 'antd';\nimport './spinner.css';\n\nconst Spinner = () => (\n  <div className=\"spinner\">\n    <Spin size=\"large\" />\n  </div>\n);\n\nexport default Spinner;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\nimport './stringRequestMovies.css';\n\nconst StringRequestMovies = ({ updateSearchString }) => {\n  const onLabelChange = (text) => {\n    if (text) {\n      updateSearchString(text);\n    }\n  };\n\n  return (\n    <form>\n      <input\n        className=\"stringRequest\"\n        type=\"text\"\n        placeholder=\"Type to search...\"\n        onChange={debounce((event) => onLabelChange(event.target.value), 1000)}\n        autoFocus\n      />\n    </form>\n  );\n};\n\nStringRequestMovies.defaultProps = {\n  updateSearchString: () => {},\n};\n\nStringRequestMovies.propTypes = {\n  updateSearchString: PropTypes.func,\n};\n\nexport default StringRequestMovies;\n","export default class MdbapiServices {\n  apiBase = 'https://api.themoviedb.org/3/search/movie?api_key=e3fe247be4eaa72ef7d3bce48bf58608';\n\n  async getResources(fragment) {\n    const res = await fetch(`${this.apiBase}${fragment}`);\n\n    if (!res.ok) {\n      throw new Error();\n    }\n\n    const body = await res.json();\n\n    if (body.results.length === 0) {\n      throw new Error();\n    }\n\n    return body;\n  }\n}\n","export default __webpack_public_path__ + \"static/media/no_image.f55aafa2.jpg\";","import React, { Component } from 'react';\nimport { format, parseISO } from 'date-fns';\nimport { Pagination } from 'antd';\nimport ErrorIndicator from '../errorIndicator/errorIndicator';\nimport MovieList from '../moviesList/moviesList';\nimport Spinner from '../spinner/spinner';\nimport StringRequestMovies from '../stringRequestMovies/stringRequestMovies';\nimport MdbapiServices from '../../services/mdbapiServices';\nimport './app.css';\nimport icon from './no_image.jpg';\n\nexport default class App extends Component {\n  mdbapiServices = new MdbapiServices();\n\n  state = {\n    error: false,\n    total: null,\n    searchString: '',\n    page: 1,\n    errorTitle: 'We did not find any movies for this request.',\n  };\n\n  createMovieCard = (id, movieImgSrc, movieName, releaseDate, description) => ({\n    id,\n    movieImgSrc,\n    movieName,\n    releaseDate,\n    description,\n  });\n\n  createMovieList = (movies, isEven) => {\n    let newArr = isEven ? movies.slice(10) : movies.slice(0, 10);\n\n    newArr = newArr.map((movie) =>\n      this.createMovieCard(\n        movie.id,\n        `${this.getImgSrc(movie.poster_path)}`,\n        movie.original_title,\n        `${format(parseISO(movie.release_date), 'MMMM d, yyyy')}`,\n        `${this.formatMovieDescription(movie.overview)}`\n      )\n    );\n\n    this.setState({\n      moviesData: newArr,\n      loading: false,\n      error: false,\n    });\n  };\n\n  updateSearchString = (text) => {\n    const { page } = this.state;\n\n    this.setState({\n      searchString: text,\n    });\n\n    this.updateMovieList(text, page);\n  };\n\n  updatePage = (page) => {\n    const { searchString } = this.state;\n\n    this.updateMovieList(searchString, page);\n  };\n\n  getImgSrc = (imgName) => {\n    if (imgName) {\n      return `https://image.tmdb.org/t/p/w200/${imgName}`;\n    }\n\n    return icon;\n  };\n\n  onError = (error) => {\n    if (error.message === 'Failed to fetch') {\n      this.setState({\n        errorTitle: 'Check your internet connection!',\n      });\n    } else {\n      this.setState({\n        errorTitle: 'We did not find any movies for this request.',\n      });\n    }\n\n    this.setState({\n      error: true,\n      total: null,\n      loading: false,\n    });\n  };\n\n  updateMovieList = async (query, page) => {\n    this.setState({\n      error: false,\n      loading: true,\n    });\n\n    try {\n      const newPage = page % 2 === 0 ? page / 2 : (page + 1) / 2;\n      const movieList = await this.mdbapiServices.getResources(`&page=${newPage}&query=${query}`);\n\n      this.createMovieList(movieList.results, page % 2 === 0);\n\n      this.setState({\n        total: movieList.total_results,\n      });\n    } catch (error) {\n      this.onError(error);\n    }\n  };\n\n  formatMovieDescription(description) {\n    const words = description.split(' ');\n\n    if (words.length > 30) {\n      return `${words.slice(0, 30).join(' ')}...`;\n    }\n\n    return words.join(' ');\n  }\n\n  render() {\n    const { moviesData, loading, error, total, page, errorTitle } = this.state;\n    const hasData = !(loading || error);\n    const spinner = loading ? <Spinner /> : null;\n    const errorMessage = error ? <ErrorIndicator errorTitle={errorTitle} /> : null;\n    const content = hasData ? <MovieList moviesData={moviesData} /> : null;\n    const pagination = total ? (\n      <Pagination\n        showSizeChanger={false}\n        defaultCurrent={page}\n        pageSize={10}\n        total={total}\n        onChange={(page) => this.updatePage(page)}\n      />\n    ) : null;\n\n    return (\n      <section className=\"movieApp\">\n        <StringRequestMovies updateSearchString={this.updateSearchString} />\n        {spinner}\n        {content}\n        {errorMessage}\n        <div className=\"paginator\">{pagination}</div>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}