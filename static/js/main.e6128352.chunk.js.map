{"version":3,"sources":["components/errorIndicator/errorIndicator.jsx","components/movieGenres/movieGenres.jsx","components/mdbApi-service-context/mdbApi-service-context.jsx","components/movie/movie.jsx","components/moviesList/moviesList.jsx","components/spinner/spinner.jsx","components/stringRequestMovies/stringRequestMovies.jsx","services/mdbapiServices.jsx","components/app/no_image.jpg","components/app/app.jsx","index.jsx"],"names":["ErrorIndicator","errorTitle","message","description","type","showIcon","defaultProps","MovieGenres","getGenres","id","useState","genre","setGenre","getGenre","a","genres","filter","element","res","name","useEffect","className","React","createContext","MdbapiServiceProvider","Provider","MdbapiServiceConsumer","Consumer","Movie","movieImgSrc","movieName","releaseDate","average","genresId","rating","rateMovie","span","alt","src","map","centered","allowHalf","count","defaultValue","style","fontSize","marginBottom","onChange","String","MoviesList","moviesData","gutter","Spinner","size","StringRequestMovies","updateSearchString","placeholder","debounce","event","text","target","value","autoFocus","MdbapiServices","fragment","fetch","ok","Error","json","body","results","length","localStorage","getItem","authentication","guestSession","setItem","guest_session_id","guestSessionId","movieId","method","headers","JSON","stringify","App","mdbapiServices","state","ratedPage","searchPage","searchString","ratedTotal","searchTotal","ratedError","searchError","ratedLoading","searchLoading","createMovieCard","createSearchMovieList","movies","isEven","newArr","slice","movie","getImgSrc","poster_path","original_title","formatDate","release_date","formatMovieDescription","overview","vote_average","genre_ids","setState","searchMoviesData","createRatedMovieList","ratedMoviesData","updateSearchMovieList","updateSearchPage","page","updateRatedPage","updateRatedMovieList","imgName","icon","onSearchError","error","onRatedError","callback","activeKey","query","newPage","getResources","movieList","total_results","getGuestSession","this","сreateGuestSession","words","split","join","date","format","parseISO","TabPane","Tabs","hasRatedData","hasSearchData","ratedSpinner","searchSpinner","searchErrorMessage","ratedErrorMessage","ratedContent","searchContent","searchPagination","showSizeChanger","defaultCurrent","pageSize","total","ratedPagination","defaultActiveKey","tab","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6128352.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Alert } from 'antd';\r\n\r\nconst ErrorIndicator = ({ errorTitle }) => <Alert message=\"Error\" description={errorTitle} type=\"error\" showIcon />;\r\n\r\nErrorIndicator.defaultProps = {\r\n  errorTitle: '',\r\n};\r\n\r\nErrorIndicator.propTypes = {\r\n  errorTitle: PropTypes.string,\r\n};\r\n\r\nexport default ErrorIndicator;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './movieGenres.css';\r\n\r\nconst MovieGenres = ({ getGenres, id }) => {\r\n  const [genre, setGenre] = useState(null);\r\n\r\n  const getGenre = async () => {\r\n    const genres = await getGenres();\r\n\r\n    const res = await genres.filter((element) => element.id === id)[0];\r\n\r\n    setGenre(res.name);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getGenre();\r\n  });\r\n\r\n  return <li className=\"movieGenres-genre\">{genre}</li>;\r\n};\r\n\r\nMovieGenres.defaultProps = {\r\n  id: 0,\r\n  getGenres: () => {},\r\n};\r\n\r\nMovieGenres.propTypes = {\r\n  id: PropTypes.number,\r\n  getGenres: PropTypes.func,\r\n};\r\n\r\nexport default MovieGenres;\r\n","import React from 'react';\r\n\r\nconst { Provider: MdbapiServiceProvider, Consumer: MdbapiServiceConsumer } = React.createContext();\r\n\r\nexport { MdbapiServiceProvider, MdbapiServiceConsumer };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col, Rate } from 'antd';\r\nimport MovieGenres from '../movieGenres/movieGenres';\r\nimport { MdbapiServiceConsumer } from '../mdbApi-service-context/mdbApi-service-context';\r\nimport './movie.css';\r\n\r\nconst Movie = ({ movieImgSrc, movieName, releaseDate, description, average, genresId, rating, id }) => {\r\n  let className = 'movie-average';\r\n\r\n  if (average >= 0 && average <= 3) {\r\n    className += ' movie-average__border-rad';\r\n  } else if (average > 3 && average <= 5) {\r\n    className += ' movie-average__border-orange';\r\n  } else if (average > 5 && average <= 7) {\r\n    className += ' movie-average__border-yellow';\r\n  } else if (average > 7) {\r\n    className += ' movie-average__border-green';\r\n  }\r\n\r\n  return (\r\n    <MdbapiServiceConsumer>\r\n      {({ getGenres, rateMovie }) => (\r\n        <Col span={12}>\r\n          <div className=\"movie\">\r\n            <div className=\"img-container\">\r\n              <img alt=\"movieBaner\" src={movieImgSrc} />\r\n            </div>\r\n            <div className=\"main-content\">\r\n              <div className=\"movie-info\">\r\n                <div className=\"movie-title\">\r\n                  <h2>{movieName}</h2>\r\n                  <div className={className}>\r\n                    <p>{average}</p>\r\n                  </div>\r\n                </div>\r\n                <p className=\"movie-releaseDate\">{releaseDate}</p>\r\n                <ul className=\"movieGenres\">\r\n                  {genresId.map((id) => (\r\n                    <MovieGenres centered getGenres={getGenres} key={id} id={id} className=\"movieGenres-genre\">\r\n                      Action\r\n                    </MovieGenres>\r\n                  ))}\r\n                </ul>\r\n                <p className=\"movie-description\">{description}</p>\r\n              </div>\r\n              <Rate\r\n                allowHalf\r\n                count={10}\r\n                defaultValue={rating}\r\n                style={{ fontSize: 17, marginBottom: 10 }}\r\n                onChange={(rating) => rateMovie(String(id), rating)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      )}\r\n    </MdbapiServiceConsumer>\r\n  );\r\n};\r\n\r\nMovie.defaultProps = {\r\n  id: 0,\r\n  rating: 0,\r\n  average: 0,\r\n  genresId: [],\r\n  movieName: '',\r\n  movieImgSrc: '',\r\n  releaseDate: '',\r\n  description: '',\r\n};\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number,\r\n  rating: PropTypes.number,\r\n  average: PropTypes.number,\r\n  movieName: PropTypes.string,\r\n  movieImgSrc: PropTypes.string,\r\n  releaseDate: PropTypes.string,\r\n  description: PropTypes.string,\r\n  genresId: PropTypes.arrayOf(PropTypes.any),\r\n};\r\n\r\nexport default Movie;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row } from 'antd';\r\nimport Movie from '../movie/movie';\r\nimport './moviesList.css';\r\n\r\nconst MoviesList = ({ moviesData }) => (\r\n  <section className=\"main\">\r\n    <Row gutter={[36, 35]}>\r\n      {moviesData.map(({ id, movieImgSrc, movieName, releaseDate, description, average, genresId, rating }) => (\r\n        <Movie\r\n          id={id}\r\n          key={id}\r\n          rating={rating}\r\n          average={average}\r\n          genresId={genresId}\r\n          movieName={movieName}\r\n          movieImgSrc={movieImgSrc}\r\n          releaseDate={releaseDate}\r\n          description={description}\r\n        />\r\n      ))}\r\n    </Row>\r\n  </section>\r\n);\r\n\r\nMoviesList.defaultProps = {\r\n  moviesData: [],\r\n};\r\n\r\nMoviesList.propTypes = {\r\n  moviesData: PropTypes.arrayOf(PropTypes.any),\r\n};\r\n\r\nexport default MoviesList;\r\n","import React from 'react';\r\nimport { Spin } from 'antd';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => (\r\n  <div className=\"spinner\">\r\n    <Spin size=\"large\" />\r\n  </div>\r\n);\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { debounce } from 'lodash';\r\nimport './stringRequestMovies.css';\r\n\r\nconst StringRequestMovies = ({ updateSearchString }) => {\r\n  const onLabelChange = (text) => {\r\n    if (text) {\r\n      updateSearchString(text);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        className=\"stringRequest\"\r\n        type=\"text\"\r\n        placeholder=\"Type to search...\"\r\n        onChange={debounce((event) => onLabelChange(event.target.value), 1000)}\r\n        autoFocus\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nStringRequestMovies.defaultProps = {\r\n  updateSearchString: () => {},\r\n};\r\n\r\nStringRequestMovies.propTypes = {\r\n  updateSearchString: PropTypes.func,\r\n};\r\n\r\nexport default StringRequestMovies;\r\n","export default class MdbapiServices {\r\n  async getResources(fragment) {\r\n    const apiBase = 'https://api.themoviedb.org/3/search/movie?api_key=e3fe247be4eaa72ef7d3bce48bf58608';\r\n    const res = await fetch(`${apiBase}${fragment}`);\r\n\r\n    if (!res.ok) {\r\n      throw new Error();\r\n    }\r\n\r\n    const body = await res.json();\r\n\r\n    if (body.results.length === 0) {\r\n      throw new Error();\r\n    }\r\n\r\n    return body;\r\n  }\r\n\r\n  async getGenres() {\r\n    const apiGenres = 'https://api.themoviedb.org/3/genre/movie/list?api_key=e3fe247be4eaa72ef7d3bce48bf58608';\r\n    const res = await fetch(apiGenres);\r\n\r\n    if (!res.ok) {\r\n      throw new Error();\r\n    }\r\n\r\n    const body = await res.json();\r\n\r\n    return body.genres;\r\n  }\r\n\r\n  async сreateGuestSession() {\r\n    const sessionId = localStorage.getItem('sessionId');\r\n\r\n    if (!sessionId) {\r\n      const apiAuthentication =\r\n        'https://api.themoviedb.org/3/authentication/guest_session/new?api_key=e3fe247be4eaa72ef7d3bce48bf58608';\r\n      const authentication = await fetch(apiAuthentication);\r\n\r\n      if (!authentication.ok) {\r\n        throw new Error();\r\n      }\r\n\r\n      const guestSession = await authentication.json();\r\n\r\n      localStorage.setItem('sessionId', guestSession.guest_session_id);\r\n    }\r\n  }\r\n\r\n  async getGuestSession(fragment) {\r\n    const guestSessionId = localStorage.getItem('sessionId');\r\n\r\n    const res = await fetch(\r\n      `https://api.themoviedb.org/3/guest_session/${guestSessionId}/rated/movies?api_key=e3fe247be4eaa72ef7d3bce48bf58608${fragment}`\r\n    );\r\n\r\n    if (!res.ok) {\r\n      throw new Error();\r\n    }\r\n\r\n    const body = await res.json();\r\n\r\n    return body;\r\n  }\r\n\r\n  rateMovie(movieId, rating) {\r\n    const guestSessionId = localStorage.getItem('sessionId');\r\n\r\n    fetch(\r\n      `https://api.themoviedb.org/3/movie/${movieId}/rating?api_key=e3fe247be4eaa72ef7d3bce48bf58608&guest_session_id=${guestSessionId}`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          value: rating,\r\n        }),\r\n      }\r\n    );\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/no_image.f55aafa2.jpg\";","import React, { Component } from 'react';\r\nimport { format, parseISO } from 'date-fns';\r\nimport { Pagination, Tabs } from 'antd';\r\nimport ErrorIndicator from '../errorIndicator/errorIndicator';\r\nimport MovieList from '../moviesList/moviesList';\r\nimport Spinner from '../spinner/spinner';\r\nimport StringRequestMovies from '../stringRequestMovies/stringRequestMovies';\r\nimport MdbapiServices from '../../services/mdbapiServices';\r\nimport { MdbapiServiceProvider } from '../mdbApi-service-context/mdbApi-service-context';\r\nimport './app.css';\r\nimport icon from './no_image.jpg';\r\n\r\nexport default class App extends Component {\r\n  mdbapiServices = new MdbapiServices();\r\n\r\n  state = {\r\n    ratedPage: 1,\r\n    searchPage: 1,\r\n    searchString: '',\r\n    ratedTotal: null,\r\n    searchTotal: null,\r\n    ratedError: false,\r\n    searchError: false,\r\n    ratedLoading: false,\r\n    searchLoading: false,\r\n    errorTitle: 'We did not find any movies for this request.',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.mdbapiServices.сreateGuestSession();\r\n  }\r\n\r\n  createMovieCard = (id, movieImgSrc, movieName, releaseDate, description, average, genresId, rating = 0) => ({\r\n    id,\r\n    movieImgSrc,\r\n    movieName,\r\n    releaseDate,\r\n    description,\r\n    average,\r\n    genresId,\r\n    rating,\r\n  });\r\n\r\n  createSearchMovieList = (movies, isEven) => {\r\n    let newArr = isEven ? movies.slice(10) : movies.slice(0, 10);\r\n\r\n    newArr = newArr.map((movie) =>\r\n      this.createMovieCard(\r\n        movie.id,\r\n        this.getImgSrc(movie.poster_path),\r\n        movie.original_title,\r\n        this.formatDate(movie.release_date),\r\n        this.formatMovieDescription(movie.overview),\r\n        movie.vote_average,\r\n        movie.genre_ids\r\n      )\r\n    );\r\n\r\n    this.setState({\r\n      searchMoviesData: newArr,\r\n      searchLoading: false,\r\n      searchError: false,\r\n    });\r\n  };\r\n\r\n  createRatedMovieList = (movies, isEven) => {\r\n    let newArr = isEven ? movies.slice(10) : movies.slice(0, 10);\r\n\r\n    newArr = newArr.map((movie) =>\r\n      this.createMovieCard(\r\n        movie.id,\r\n        this.getImgSrc(movie.poster_path),\r\n        movie.original_title,\r\n        this.formatDate(movie.release_date),\r\n        this.formatMovieDescription(movie.overview),\r\n        movie.vote_average,\r\n        movie.genre_ids,\r\n        movie.rating\r\n      )\r\n    );\r\n\r\n    this.setState({\r\n      ratedMoviesData: newArr,\r\n      ratedLoading: false,\r\n      ratedError: false,\r\n    });\r\n  };\r\n\r\n  updateSearchString = (text) => {\r\n    const { searchPage } = this.state;\r\n\r\n    this.setState({\r\n      searchString: text,\r\n    });\r\n\r\n    this.updateSearchMovieList(text, searchPage);\r\n  };\r\n\r\n  updateSearchPage = (page) => {\r\n    const { searchString } = this.state;\r\n\r\n    this.updateSearchMovieList(searchString, page);\r\n  };\r\n\r\n  updateRatedPage = (page) => {\r\n    this.setState({\r\n      ratedPage: page,\r\n    });\r\n\r\n    this.updateRatedMovieList(page);\r\n  };\r\n\r\n  getImgSrc = (imgName) => {\r\n    if (imgName) {\r\n      return `https://image.tmdb.org/t/p/w200/${imgName}`;\r\n    }\r\n\r\n    return icon;\r\n  };\r\n\r\n  onSearchError = (error) => {\r\n    if (error.message === 'Failed to fetch') {\r\n      this.setState({\r\n        errorTitle: 'Check your internet connection!',\r\n      });\r\n    } else {\r\n      this.setState({\r\n        errorTitle: 'We did not find any movies for this request.',\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      searchError: true,\r\n      searchTotal: null,\r\n      searchLoading: false,\r\n    });\r\n  };\r\n\r\n  onRatedError = (error) => {\r\n    if (error.message === 'Failed to fetch') {\r\n      this.setState({\r\n        errorTitle: 'Check your internet connection!',\r\n      });\r\n    } else {\r\n      this.setState({\r\n        errorTitle:\r\n          'We have had some server trouble, and the films you have rated failed to display. Try your luck later.',\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      ratedError: true,\r\n      ratedTotal: null,\r\n      ratedLoading: false,\r\n    });\r\n  };\r\n\r\n  callback = (activeKey) => {\r\n    const { ratedPage } = this.state;\r\n\r\n    if (activeKey === '2') {\r\n      this.updateRatedMovieList(ratedPage);\r\n    }\r\n  };\r\n\r\n  updateSearchMovieList = async (query, page) => {\r\n    this.setState({\r\n      searchError: false,\r\n      searchLoading: true,\r\n    });\r\n\r\n    try {\r\n      const newPage = page % 2 === 0 ? page / 2 : (page + 1) / 2;\r\n      const movieList = await this.mdbapiServices.getResources(`&page=${newPage}&query=${query}`);\r\n\r\n      this.createSearchMovieList(movieList.results, page % 2 === 0);\r\n\r\n      this.setState({\r\n        searchTotal: movieList.total_results,\r\n      });\r\n    } catch (error) {\r\n      this.onSearchError(error);\r\n    }\r\n  };\r\n\r\n  updateRatedMovieList = async (page) => {\r\n    this.setState({\r\n      ratedError: false,\r\n      ratedLoading: true,\r\n    });\r\n\r\n    try {\r\n      const newPage = page % 2 === 0 ? page / 2 : (page + 1) / 2;\r\n      const movieList = await this.mdbapiServices.getGuestSession(`&page=${newPage}`);\r\n\r\n      this.createRatedMovieList(movieList.results, page % 2 === 0);\r\n\r\n      this.setState({\r\n        ratedTotal: movieList.total_results,\r\n      });\r\n    } catch (error) {\r\n      this.onRatedError(error);\r\n    }\r\n  };\r\n\r\n  formatMovieDescription(description) {\r\n    const words = description.split(' ');\r\n\r\n    if (words.length > 15) {\r\n      return `${words.slice(0, 15).join(' ')}...`;\r\n    }\r\n\r\n    return words.join(' ');\r\n  }\r\n\r\n  formatDate(date) {\r\n    if (date) {\r\n      return format(parseISO(date), 'MMMM d, yyyy');\r\n    }\r\n\r\n    return 'NA';\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      ratedPage,\r\n      errorTitle,\r\n      searchPage,\r\n      ratedTotal,\r\n      ratedError,\r\n      searchError,\r\n      searchTotal,\r\n      ratedLoading,\r\n      searchLoading,\r\n      ratedMoviesData,\r\n      searchMoviesData,\r\n    } = this.state;\r\n    const { TabPane } = Tabs;\r\n    const hasRatedData = !(ratedLoading || ratedError);\r\n    const hasSearchData = !(searchLoading || searchError);\r\n    const ratedSpinner = ratedLoading ? <Spinner /> : null;\r\n    const searchSpinner = searchLoading ? <Spinner /> : null;\r\n    const searchErrorMessage = searchError ? <ErrorIndicator errorTitle={errorTitle} /> : null;\r\n    const ratedErrorMessage = ratedError ? <ErrorIndicator errorTitle={errorTitle} /> : null;\r\n    const ratedContent = hasRatedData ? <MovieList moviesData={ratedMoviesData} /> : null;\r\n    const searchContent = hasSearchData ? <MovieList moviesData={searchMoviesData} /> : null;\r\n    const searchPagination = searchTotal ? (\r\n      <Pagination\r\n        showSizeChanger={false}\r\n        defaultCurrent={searchPage}\r\n        pageSize={10}\r\n        total={searchTotal}\r\n        onChange={this.updateSearchPage}\r\n      />\r\n    ) : null;\r\n    const ratedPagination = ratedTotal ? (\r\n      <Pagination\r\n        showSizeChanger={false}\r\n        defaultCurrent={ratedPage}\r\n        pageSize={10}\r\n        total={ratedTotal}\r\n        onChange={this.updateRatedPage}\r\n      />\r\n    ) : null;\r\n\r\n    return (\r\n      <section className=\"movieApp\">\r\n        <MdbapiServiceProvider value={this.mdbapiServices}>\r\n          <Tabs centered defaultActiveKey=\"1\" onChange={this.callback}>\r\n            <TabPane tab=\"Search\" key=\"1\">\r\n              <StringRequestMovies updateSearchString={this.updateSearchString} />\r\n              {searchSpinner}\r\n              {searchContent}\r\n              {searchErrorMessage}\r\n              <div className=\"paginator\">{searchPagination}</div>\r\n            </TabPane>\r\n            <TabPane tab=\"Rated\" key=\"2\">\r\n              {ratedSpinner}\r\n              {ratedContent}\r\n              {ratedErrorMessage}\r\n              <div className=\"paginator\">{ratedPagination}</div>\r\n            </TabPane>\r\n          </Tabs>\r\n        </MdbapiServiceProvider>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}