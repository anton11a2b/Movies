{"version":3,"sources":["components/errorIndicator/errorIndicator.jsx","components/movieGenres/movieGenres.jsx","components/mdbApi-service-context/mdbApi-service-context.jsx","components/movie/movie.jsx","components/moviesList/moviesList.jsx","components/spinner/spinner.jsx","components/stringRequestMovies/stringRequestMovies.jsx","services/mdbapiServices.jsx","components/app/no_image.jpg","components/app/app.jsx","index.jsx"],"names":["ErrorIndicator","errorTitle","message","description","type","showIcon","defaultProps","MovieGenres","getGenres","id","useState","genre","setGenre","getGenre","a","genres","filter","element","res","name","useEffect","className","React","createContext","MdbapiServiceProvider","Provider","MdbapiServiceConsumer","Consumer","Movie","movieImgSrc","movieName","releaseDate","average","genresId","rating","rateMovie","alt","src","map","centered","allowHalf","count","defaultValue","style","fontSize","marginBottom","onChange","String","MoviesList","moviesData","Spinner","size","StringRequestMovies","updateSearchString","placeholder","debounce","event","text","target","value","autoFocus","MdbapiServices","fragment","fetch","ok","Error","json","body","results","length","localStorage","getItem","authentication","guestSession","setItem","guest_session_id","guestSessionId","movieId","method","headers","JSON","stringify","App","mdbapiServices","state","ratedPage","searchPage","searchString","ratedTotal","searchTotal","ratedError","searchError","ratedLoading","searchLoading","createMovieCard","createSearchMovieList","movies","isEven","newArr","slice","movie","getImgSrc","poster_path","original_title","formatDate","release_date","formatMovieDescription","overview","vote_average","genre_ids","setState","searchMoviesData","createRatedMovieList","ratedMoviesData","updateSearchMovieList","updateSearchPage","page","updateRatedPage","updateRatedMovieList","imgName","icon","onSearchError","error","onRatedError","callback","activeKey","query","newPage","getResources","movieList","total_results","getGuestSession","this","сreateGuestSession","words","split","join","date","format","parseISO","TabPane","Tabs","hasRatedData","hasSearchData","ratedSpinner","searchSpinner","searchErrorMessage","ratedErrorMessage","ratedContent","searchContent","searchPagination","showSizeChanger","defaultCurrent","pageSize","total","ratedPagination","defaultActiveKey","tab","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df3df008.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert } from 'antd';\n\nconst ErrorIndicator = ({ errorTitle }) => <Alert message=\"Error\" description={errorTitle} type=\"error\" showIcon />;\n\nErrorIndicator.defaultProps = {\n  errorTitle: '',\n};\n\nErrorIndicator.propTypes = {\n  errorTitle: PropTypes.string,\n};\n\nexport default ErrorIndicator;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './movieGenres.css';\n\nconst MovieGenres = ({ getGenres, id }) => {\n  const [genre, setGenre] = useState(null);\n\n  const getGenre = async () => {\n    const genres = await getGenres();\n\n    const res = await genres.filter((element) => element.id === id)[0];\n\n    setGenre(res.name);\n  };\n\n  useEffect(() => {\n    getGenre();\n  });\n\n  return <li className=\"movieGenres-genre\">{genre}</li>;\n};\n\nMovieGenres.defaultProps = {\n  id: 0,\n  getGenres: () => {},\n};\n\nMovieGenres.propTypes = {\n  id: PropTypes.number,\n  getGenres: PropTypes.func,\n};\n\nexport default MovieGenres;\n","import React from 'react';\n\nconst { Provider: MdbapiServiceProvider, Consumer: MdbapiServiceConsumer } = React.createContext();\n\nexport { MdbapiServiceProvider, MdbapiServiceConsumer };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Rate } from 'antd';\nimport MovieGenres from '../movieGenres/movieGenres';\nimport { MdbapiServiceConsumer } from '../mdbApi-service-context/mdbApi-service-context';\nimport './movie.css';\n\nconst Movie = ({ movieImgSrc, movieName, releaseDate, description, average, genresId, rating, id }) => {\n  let className = 'movie-average';\n\n  if (average >= 0 && average <= 3) {\n    className += ' movie-average__border-rad';\n  } else if (average > 3 && average <= 5) {\n    className += ' movie-average__border-orange';\n  } else if (average > 5 && average <= 7) {\n    className += ' movie-average__border-yellow';\n  } else if (average > 7) {\n    className += ' movie-average__border-green';\n  }\n\n  return (\n    <MdbapiServiceConsumer>\n      {({ getGenres, rateMovie }) => (\n        <div className=\"movie\">\n          <div className=\"img-container\">\n            <img alt=\"movieBanner\" src={movieImgSrc} />\n          </div>\n          <div className=\"main-content\">\n            <div className=\"movie-info\">\n              <div className=\"movie-title\">\n                <h2>{movieName}</h2>\n                <div className={className}>\n                  <p>{average}</p>\n                </div>\n              </div>\n              <p className=\"movie-releaseDate\">{releaseDate}</p>\n              <ul className=\"movieGenres\">\n                {genresId.map((id) => (\n                  <MovieGenres centered getGenres={getGenres} key={id} id={id} className=\"movieGenres-genre\">\n                    Action\n                  </MovieGenres>\n                ))}\n              </ul>\n              <p className=\"movie-description\">{description}</p>\n            </div>\n            <div>\n              <p className=\"movie-description movie-description__mobile\">{description}</p>\n            </div>\n            <div className=\"movie-rate\">\n              <Rate\n                allowHalf\n                count={10}\n                defaultValue={rating}\n                style={{ fontSize: 17, marginBottom: 10 }}\n                onChange={(rating) => rateMovie(String(id), rating)}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </MdbapiServiceConsumer>\n  );\n};\n\nMovie.defaultProps = {\n  id: 0,\n  rating: 0,\n  average: 0,\n  genresId: [],\n  movieName: '',\n  movieImgSrc: '',\n  releaseDate: '',\n  description: '',\n};\n\nMovie.propTypes = {\n  id: PropTypes.number,\n  rating: PropTypes.number,\n  average: PropTypes.number,\n  movieName: PropTypes.string,\n  movieImgSrc: PropTypes.string,\n  releaseDate: PropTypes.string,\n  description: PropTypes.string,\n  genresId: PropTypes.arrayOf(PropTypes.any),\n};\n\nexport default Movie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Movie from '../movie/movie';\nimport './moviesList.css';\n\nconst MoviesList = ({ moviesData }) => (\n  <section className=\"main\">\n    <div className=\"row\">\n      {moviesData.map(({ id, movieImgSrc, movieName, releaseDate, description, average, genresId, rating }) => (\n        <Movie\n          id={id}\n          key={id}\n          rating={rating}\n          average={average}\n          genresId={genresId}\n          movieName={movieName}\n          movieImgSrc={movieImgSrc}\n          releaseDate={releaseDate}\n          description={description}\n        />\n      ))}\n    </div>\n  </section>\n);\n\nMoviesList.defaultProps = {\n  moviesData: [],\n};\n\nMoviesList.propTypes = {\n  moviesData: PropTypes.arrayOf(PropTypes.any),\n};\n\nexport default MoviesList;\n","import React from 'react';\nimport { Spin } from 'antd';\nimport './spinner.css';\n\nconst Spinner = () => (\n  <div className=\"spinner\">\n    <Spin size=\"large\" />\n  </div>\n);\n\nexport default Spinner;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\nimport './stringRequestMovies.css';\n\nconst StringRequestMovies = ({ updateSearchString }) => {\n  const onLabelChange = (text) => {\n    if (text) {\n      updateSearchString(text);\n    }\n  };\n\n  return (\n    <form>\n      <input\n        className=\"stringRequest\"\n        type=\"text\"\n        placeholder=\"Type to search...\"\n        onChange={debounce((event) => onLabelChange(event.target.value), 1000)}\n        autoFocus\n      />\n    </form>\n  );\n};\n\nStringRequestMovies.defaultProps = {\n  updateSearchString: () => {},\n};\n\nStringRequestMovies.propTypes = {\n  updateSearchString: PropTypes.func,\n};\n\nexport default StringRequestMovies;\n","export default class MdbapiServices {\n  async getResources(fragment) {\n    const apiBase = 'https://api.themoviedb.org/3/search/movie?api_key=e3fe247be4eaa72ef7d3bce48bf58608';\n    const res = await fetch(`${apiBase}${fragment}`);\n\n    if (!res.ok) {\n      throw new Error();\n    }\n\n    const body = await res.json();\n\n    if (body.results.length === 0) {\n      throw new Error();\n    }\n\n    return body;\n  }\n\n  async getGenres() {\n    const apiGenres = 'https://api.themoviedb.org/3/genre/movie/list?api_key=e3fe247be4eaa72ef7d3bce48bf58608';\n    const res = await fetch(apiGenres);\n\n    if (!res.ok) {\n      throw new Error();\n    }\n\n    const body = await res.json();\n\n    return body.genres;\n  }\n\n  async сreateGuestSession() {\n    const sessionId = localStorage.getItem('sessionId');\n\n    if (!sessionId) {\n      const apiAuthentication =\n        'https://api.themoviedb.org/3/authentication/guest_session/new?api_key=e3fe247be4eaa72ef7d3bce48bf58608';\n      const authentication = await fetch(apiAuthentication);\n\n      if (!authentication.ok) {\n        throw new Error();\n      }\n\n      const guestSession = await authentication.json();\n\n      localStorage.setItem('sessionId', guestSession.guest_session_id);\n    }\n  }\n\n  async getGuestSession(fragment) {\n    const guestSessionId = localStorage.getItem('sessionId');\n\n    const res = await fetch(\n      `https://api.themoviedb.org/3/guest_session/${guestSessionId}/rated/movies?api_key=e3fe247be4eaa72ef7d3bce48bf58608${fragment}`\n    );\n\n    if (!res.ok) {\n      throw new Error();\n    }\n\n    const body = await res.json();\n\n    return body;\n  }\n\n  rateMovie(movieId, rating) {\n    const guestSessionId = localStorage.getItem('sessionId');\n\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/rating?api_key=e3fe247be4eaa72ef7d3bce48bf58608&guest_session_id=${guestSessionId}`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n        },\n        body: JSON.stringify({\n          value: rating,\n        }),\n      }\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/no_image.f55aafa2.jpg\";","import React, { Component } from 'react';\nimport { format, parseISO } from 'date-fns';\nimport { Pagination, Tabs } from 'antd';\nimport ErrorIndicator from '../errorIndicator/errorIndicator';\nimport MovieList from '../moviesList/moviesList';\nimport Spinner from '../spinner/spinner';\nimport StringRequestMovies from '../stringRequestMovies/stringRequestMovies';\nimport MdbapiServices from '../../services/mdbapiServices';\nimport { MdbapiServiceProvider } from '../mdbApi-service-context/mdbApi-service-context';\nimport './app.css';\nimport icon from './no_image.jpg';\n\nexport default class App extends Component {\n  mdbapiServices = new MdbapiServices();\n\n  state = {\n    ratedPage: 1,\n    searchPage: 1,\n    searchString: '',\n    ratedTotal: null,\n    searchTotal: null,\n    ratedError: false,\n    searchError: false,\n    ratedLoading: false,\n    searchLoading: false,\n    errorTitle: 'We did not find any movies for this request.',\n  };\n\n  componentDidMount() {\n    this.mdbapiServices.сreateGuestSession();\n  }\n\n  createMovieCard = (id, movieImgSrc, movieName, releaseDate, description, average, genresId, rating = 0) => ({\n    id,\n    movieImgSrc,\n    movieName,\n    releaseDate,\n    description,\n    average,\n    genresId,\n    rating,\n  });\n\n  createSearchMovieList = (movies, isEven) => {\n    let newArr = isEven ? movies.slice(10) : movies.slice(0, 10);\n\n    newArr = newArr.map((movie) =>\n      this.createMovieCard(\n        movie.id,\n        this.getImgSrc(movie.poster_path),\n        movie.original_title,\n        this.formatDate(movie.release_date),\n        this.formatMovieDescription(movie.overview),\n        movie.vote_average,\n        movie.genre_ids\n      )\n    );\n\n    this.setState({\n      searchMoviesData: newArr,\n      searchLoading: false,\n      searchError: false,\n    });\n  };\n\n  createRatedMovieList = (movies, isEven) => {\n    let newArr = isEven ? movies.slice(10) : movies.slice(0, 10);\n\n    newArr = newArr.map((movie) =>\n      this.createMovieCard(\n        movie.id,\n        this.getImgSrc(movie.poster_path),\n        movie.original_title,\n        this.formatDate(movie.release_date),\n        this.formatMovieDescription(movie.overview),\n        movie.vote_average,\n        movie.genre_ids,\n        movie.rating\n      )\n    );\n\n    this.setState({\n      ratedMoviesData: newArr,\n      ratedLoading: false,\n      ratedError: false,\n    });\n  };\n\n  updateSearchString = (text) => {\n    const { searchPage } = this.state;\n\n    this.setState({\n      searchString: text,\n    });\n\n    this.updateSearchMovieList(text, searchPage);\n  };\n\n  updateSearchPage = (page) => {\n    const { searchString } = this.state;\n\n    this.updateSearchMovieList(searchString, page);\n  };\n\n  updateRatedPage = (page) => {\n    this.setState({\n      ratedPage: page,\n    });\n\n    this.updateRatedMovieList(page);\n  };\n\n  getImgSrc = (imgName) => {\n    if (imgName) {\n      return `https://image.tmdb.org/t/p/w200/${imgName}`;\n    }\n\n    return icon;\n  };\n\n  onSearchError = (error) => {\n    if (error.message === 'Failed to fetch') {\n      this.setState({\n        errorTitle: 'Check your internet connection!',\n      });\n    } else {\n      this.setState({\n        errorTitle: 'We did not find any movies for this request.',\n      });\n    }\n\n    this.setState({\n      searchError: true,\n      searchTotal: null,\n      searchLoading: false,\n    });\n  };\n\n  onRatedError = (error) => {\n    if (error.message === 'Failed to fetch') {\n      this.setState({\n        errorTitle: 'Check your internet connection!',\n      });\n    } else {\n      this.setState({\n        errorTitle:\n          'We have had some server trouble, and the films you have rated failed to display. Try your luck later.',\n      });\n    }\n\n    this.setState({\n      ratedError: true,\n      ratedTotal: null,\n      ratedLoading: false,\n    });\n  };\n\n  callback = (activeKey) => {\n    const { ratedPage } = this.state;\n\n    if (activeKey === '2') {\n      this.updateRatedMovieList(ratedPage);\n    }\n  };\n\n  updateSearchMovieList = async (query, page) => {\n    this.setState({\n      searchError: false,\n      searchLoading: true,\n    });\n\n    try {\n      const newPage = page % 2 === 0 ? page / 2 : (page + 1) / 2;\n      const movieList = await this.mdbapiServices.getResources(`&page=${newPage}&query=${query}`);\n\n      this.createSearchMovieList(movieList.results, page % 2 === 0);\n\n      this.setState({\n        searchTotal: movieList.total_results,\n      });\n    } catch (error) {\n      this.onSearchError(error);\n    }\n  };\n\n  updateRatedMovieList = async (page) => {\n    this.setState({\n      ratedError: false,\n      ratedLoading: true,\n    });\n\n    try {\n      const newPage = page % 2 === 0 ? page / 2 : (page + 1) / 2;\n      const movieList = await this.mdbapiServices.getGuestSession(`&page=${newPage}`);\n\n      this.createRatedMovieList(movieList.results, page % 2 === 0);\n\n      this.setState({\n        ratedTotal: movieList.total_results,\n      });\n    } catch (error) {\n      this.onRatedError(error);\n    }\n  };\n\n  formatMovieDescription(description) {\n    const words = description.split(' ');\n\n    if (words.length > 15) {\n      return `${words.slice(0, 15).join(' ')}...`;\n    }\n\n    return words.join(' ');\n  }\n\n  formatDate(date) {\n    if (date) {\n      return format(parseISO(date), 'MMMM d, yyyy');\n    }\n\n    return 'NA';\n  }\n\n  render() {\n    const {\n      ratedPage,\n      errorTitle,\n      searchPage,\n      ratedTotal,\n      ratedError,\n      searchError,\n      searchTotal,\n      ratedLoading,\n      searchLoading,\n      ratedMoviesData,\n      searchMoviesData,\n    } = this.state;\n    const { TabPane } = Tabs;\n    const hasRatedData = !(ratedLoading || ratedError);\n    const hasSearchData = !(searchLoading || searchError);\n    const ratedSpinner = ratedLoading ? <Spinner /> : null;\n    const searchSpinner = searchLoading ? <Spinner /> : null;\n    const searchErrorMessage = searchError ? <ErrorIndicator errorTitle={errorTitle} /> : null;\n    const ratedErrorMessage = ratedError ? <ErrorIndicator errorTitle={errorTitle} /> : null;\n    const ratedContent = hasRatedData ? <MovieList moviesData={ratedMoviesData} /> : null;\n    const searchContent = hasSearchData ? <MovieList moviesData={searchMoviesData} /> : null;\n    const searchPagination = searchTotal ? (\n      <Pagination\n        showSizeChanger={false}\n        defaultCurrent={searchPage}\n        pageSize={10}\n        total={searchTotal}\n        onChange={this.updateSearchPage}\n      />\n    ) : null;\n    const ratedPagination = ratedTotal ? (\n      <Pagination\n        showSizeChanger={false}\n        defaultCurrent={ratedPage}\n        pageSize={10}\n        total={ratedTotal}\n        onChange={this.updateRatedPage}\n      />\n    ) : null;\n\n    return (\n      <section className=\"movieApp\">\n        <MdbapiServiceProvider value={this.mdbapiServices}>\n          <Tabs centered defaultActiveKey=\"1\" onChange={this.callback}>\n            <TabPane tab=\"Search\" key=\"1\">\n              <StringRequestMovies updateSearchString={this.updateSearchString} />\n              {searchSpinner}\n              {searchContent}\n              {searchErrorMessage}\n              <div className=\"paginator\">{searchPagination}</div>\n            </TabPane>\n            <TabPane tab=\"Rated\" key=\"2\">\n              {ratedSpinner}\n              {ratedContent}\n              {ratedErrorMessage}\n              <div className=\"paginator\">{ratedPagination}</div>\n            </TabPane>\n          </Tabs>\n        </MdbapiServiceProvider>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}