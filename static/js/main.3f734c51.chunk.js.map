{"version":3,"sources":["components/errorIndicator/errorIndicator.jsx","components/spinner/spinner.jsx","components/movie/movie.jsx","components/moviesList/moviesList.jsx","services/swapiServices.jsx","components/app/app.jsx","index.jsx"],"names":["ErrorIndicator","message","description","type","showIcon","Spinner","className","size","Movie","movieImgSrc","movieName","releaseDate","loading","spinner","movieBaner","alt","src","span","defaultProps","MoviesList","moviesData","gutter","map","id","SwapiServices","apiBase","url","a","fetch","res","ok","Error","json","body","path","this","getResources","results","App","swapiServices","state","error","createMovieCard","createMovieList","movies","newArr","movie","poster_path","original_title","format","parseISO","release_date","formatMovieDescription","overview","setState","onError","console","log","updateMovieCard","getMovies","then","catch","words","split","length","slice","join","hasData","errorMessage","content","Component","ReactDOM","render","document","getElementById"],"mappings":"uRAOeA,EAJQ,kBACrB,cAAC,IAAD,CAAOC,QAAQ,QAAQC,YAAY,6CAA6CC,KAAK,QAAQC,UAAQ,K,wBCMxFC,G,MANC,kBACd,qBAAKC,UAAU,UAAf,SACE,cAAC,IAAD,CAAMC,KAAK,cCATC,G,MAAQ,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,YAAaC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,YAAaT,EAA2B,EAA3BA,YAAaU,EAAc,EAAdA,QAC3DC,EAAUD,EAAU,cAAC,EAAD,IAAc,KAClCE,EAAcF,EAAuD,KAA7C,qBAAKG,IAAI,aAAaC,IAAKP,IAEzD,OACE,cAAC,IAAD,CAAKQ,KAAM,GAAX,SACE,sBAAKX,UAAU,QAAf,UACGO,EACAC,EACD,sBAAKR,UAAU,aAAf,UACE,6BAAKI,IACL,mBAAGJ,UAAU,oBAAb,SAAkCK,IAClC,qBAAIL,UAAU,cAAd,UACE,oBAAIA,UAAU,oBAAd,oBACA,oBAAIA,UAAU,oBAAd,sBAEF,mBAAGA,UAAU,oBAAb,SAAkCJ,cAO5CM,EAAMU,aAAe,CACnBT,YAAa,GACbC,UAAW,GACXC,YAAa,GACbT,YAAa,GACbU,SAAS,GAWIJ,QCvCTW,G,MAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYR,EAAf,EAAeA,QAAf,OACjB,yBAASN,UAAU,OAAnB,SACE,cAAC,IAAD,CAAKe,OAAQ,CAAC,GAAI,IAAlB,SACGD,EAAWE,KAAI,gBAAGC,EAAH,EAAGA,GAAId,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,YAAaT,EAA5C,EAA4CA,YAA5C,OACd,cAAC,EAAD,CAEEO,YAAaA,EACbC,UAAWA,EACXC,YAAaA,EACbT,YAAaA,EACbU,QAASA,GALJW,YAYfJ,EAAWD,aAAe,CACxBN,SAAS,EACTQ,WAAY,IAQCD,Q,yBCjCMK,E,iDACnBC,QAAU,qF,uFAEV,WAAmBC,GAAnB,iBAAAC,EAAA,sEACoBC,MAAMF,GAD1B,WACQG,EADR,QAGWC,GAHX,sBAIU,IAAIC,MAJd,uBAOqBF,EAAIG,OAPzB,cAOQC,EAPR,yBAQSA,GART,2C,qHAWA,WAAgBC,GAAhB,eAAAP,EAAA,sEACoBQ,KAAKC,aAAL,UAAqBD,KAAKV,SAA1B,OAAoCS,IADxD,cACQL,EADR,yBAESA,EAAIQ,SAFb,gD,8DCJmBC,G,wDAGnB,aAAe,IAAD,8BACZ,gBAHFC,cAAgB,IAAIf,EAEN,EAKdgB,MAAQ,CACN5B,SAAS,EACT6B,OAAO,GAPK,EAUdC,gBAAkB,SAACnB,EAAId,EAAaC,EAAWC,EAAaT,GAA1C,MAA2D,CAC3EqB,KACAd,cACAC,YACAC,cACAT,gBAfY,EAkBdyC,gBAAkB,SAACC,GACjB,IAAMC,EAASD,EAAOtB,KAAI,SAACwB,GAAD,OACxB,EAAKJ,gBACHI,EAAMvB,GADR,0CAEqCuB,EAAMC,aACzCD,EAAME,eAHR,UAIKC,YAAOC,YAASJ,EAAMK,cAAe,iBAJ1C,UAKK,EAAKC,uBAAuBN,EAAMO,eAIzC,EAAKC,SAAS,CACZlC,WAAYyB,EACZjC,SAAS,KA/BC,EAmCd2C,QAAU,SAACd,GACTe,QAAQC,IAAIhB,EAAMxC,SAElB,EAAKqD,SAAS,CACZb,OAAO,EACP7B,SAAS,KAtCX,EAAK8C,gBAAgB,UAFT,E,mDA4Cd,SAAgBxB,GACdC,KAAKI,cAAcoB,UAAnB,iBAAuCzB,IAAQ0B,KAAKzB,KAAKQ,iBAAiBkB,MAAM1B,KAAKoB,W,oCAGvF,SAAuBrD,GACrB,IAAM4D,EAAQ5D,EAAY6D,MAAM,KAEhC,OAAID,EAAME,OAAS,GACX,GAAN,OAAUF,EAAMG,MAAM,EAAG,IAAIC,KAAK,KAAlC,OAGKJ,EAAMI,KAAK,O,oBAGpB,WACE,MAAuC/B,KAAKK,MAApCpB,EAAR,EAAQA,WAAYR,EAApB,EAAoBA,QAAS6B,EAA7B,EAA6BA,MACvB0B,IAAYvD,GAAW6B,GACvB5B,EAAUD,EAAU,cAAC,EAAD,IAAc,KAClCwD,EAAe3B,EAAQ,cAAC,EAAD,IAAqB,KAC5C4B,EAAUF,EAAU,cAAC,EAAD,CAAW/C,WAAYA,EAAYR,QAASA,IAAc,KAEpF,OACE,0BAASN,UAAU,WAAnB,UACGO,EACAwD,EACAD,S,GAxEwBE,c,MCLjCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.3f734c51.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Alert } from 'antd';\r\n\r\nconst ErrorIndicator = () => (\r\n  <Alert message=\"Error\" description=\"The reqest you sent is invalid. Try again.\" type=\"error\" showIcon />\r\n);\r\n\r\nexport default ErrorIndicator;\r\n","import React from 'react';\r\nimport { Spin } from 'antd';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => (\r\n  <div className=\"spinner\">\r\n    <Spin size=\"large\" />\r\n  </div>\r\n);\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col } from 'antd';\r\nimport Spinner from '../spinner/spinner';\r\nimport './movie.css';\r\n\r\nconst Movie = ({ movieImgSrc, movieName, releaseDate, description, loading }) => {\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const movieBaner = !loading ? <img alt=\"movieBaner\" src={movieImgSrc} /> : null;\r\n\r\n  return (\r\n    <Col span={12}>\r\n      <div className=\"movie\">\r\n        {spinner}\r\n        {movieBaner}\r\n        <div className=\"movie-info\">\r\n          <h2>{movieName}</h2>\r\n          <p className=\"movie-releaseDate\">{releaseDate}</p>\r\n          <ul className=\"movieGenres\">\r\n            <li className=\"movieGenres-genre\">Action</li>\r\n            <li className=\"movieGenres-genre\">Drama</li>\r\n          </ul>\r\n          <p className=\"movie-description\">{description}</p>\r\n        </div>\r\n      </div>\r\n    </Col>\r\n  );\r\n};\r\n\r\nMovie.defaultProps = {\r\n  movieImgSrc: '',\r\n  movieName: '',\r\n  releaseDate: '',\r\n  description: '',\r\n  loading: false,\r\n};\r\n\r\nMovie.propTypes = {\r\n  movieImgSrc: PropTypes.string,\r\n  movieName: PropTypes.string,\r\n  releaseDate: PropTypes.string,\r\n  description: PropTypes.string,\r\n  loading: PropTypes.bool,\r\n};\r\n\r\nexport default Movie;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row } from 'antd';\r\nimport Movie from '../movie/movie';\r\nimport './moviesList.css';\r\n\r\nconst MoviesList = ({ moviesData, loading }) => (\r\n  <section className=\"main\">\r\n    <Row gutter={[36, 35]}>\r\n      {moviesData.map(({ id, movieImgSrc, movieName, releaseDate, description }) => (\r\n        <Movie\r\n          key={id}\r\n          movieImgSrc={movieImgSrc}\r\n          movieName={movieName}\r\n          releaseDate={releaseDate}\r\n          description={description}\r\n          loading={loading}\r\n        />\r\n      ))}\r\n    </Row>\r\n  </section>\r\n);\r\n\r\nMoviesList.defaultProps = {\r\n  loading: false,\r\n  moviesData: [],\r\n};\r\n\r\nMoviesList.propTypes = {\r\n  loading: PropTypes.bool,\r\n  moviesData: PropTypes.arrayOf(PropTypes.any),\r\n};\r\n\r\nexport default MoviesList;\r\n","export default class SwapiServices {\r\n  apiBase = 'https://api.themoviedb.org/3/search/movie?api_key=e3fe247be4eaa72ef7d3bce48bf58608';\r\n\r\n  async getResources(url) {\r\n    const res = await fetch(url);\r\n\r\n    if (!res.ok) {\r\n      throw new Error();\r\n    }\r\n\r\n    const body = await res.json();\r\n    return body;\r\n  }\r\n\r\n  async getMovies(path) {\r\n    const res = await this.getResources(`${this.apiBase}${path}`);\r\n    return res.results;\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { format, parseISO } from 'date-fns';\r\nimport ErrorIndicator from '../errorIndicator/errorIndicator';\r\nimport MovieList from '../moviesList/moviesList';\r\nimport Spinner from '../spinner/spinner';\r\nimport SwapiServices from '../../services/swapiServices';\r\nimport './app.css';\r\n\r\n/* eslint-disable no-console */\r\n\r\nexport default class App extends Component {\r\n  swapiServices = new SwapiServices();\r\n\r\n  constructor() {\r\n    super();\r\n    this.updateMovieCard('return');\r\n  }\r\n\r\n  state = {\r\n    loading: false,\r\n    error: false,\r\n  };\r\n\r\n  createMovieCard = (id, movieImgSrc, movieName, releaseDate, description) => ({\r\n    id,\r\n    movieImgSrc,\r\n    movieName,\r\n    releaseDate,\r\n    description,\r\n  });\r\n\r\n  createMovieList = (movies) => {\r\n    const newArr = movies.map((movie) =>\r\n      this.createMovieCard(\r\n        movie.id,\r\n        `https://image.tmdb.org/t/p/w200/${movie.poster_path}`,\r\n        movie.original_title,\r\n        `${format(parseISO(movie.release_date), 'MMMM d, yyyy')}`,\r\n        `${this.formatMovieDescription(movie.overview)}`\r\n      )\r\n    );\r\n\r\n    this.setState({\r\n      moviesData: newArr,\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  onError = (error) => {\r\n    console.log(error.message);\r\n\r\n    this.setState({\r\n      error: true,\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  updateMovieCard(path) {\r\n    this.swapiServices.getMovies(`&query=${path}`).then(this.createMovieList).catch(this.onError);\r\n  }\r\n\r\n  formatMovieDescription(description) {\r\n    const words = description.split(' ');\r\n\r\n    if (words.length > 35) {\r\n      return `${words.slice(0, 35).join(' ')}...`;\r\n    }\r\n\r\n    return words.join(' ');\r\n  }\r\n\r\n  render() {\r\n    const { moviesData, loading, error } = this.state;\r\n    const hasData = !(loading || error);\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const errorMessage = error ? <ErrorIndicator /> : null;\r\n    const content = hasData ? <MovieList moviesData={moviesData} loading={loading} /> : null;\r\n\r\n    return (\r\n      <section className=\"movieApp\">\r\n        {spinner}\r\n        {content}\r\n        {errorMessage}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}